CREATE INDEX ON :ipNode(ipAddress)
load csv from "http://localhost:7000/ipAddressesGlobal.csv" as csvline create (n:ipNode{ipAddress:csvline[1]})
using periodic commit 1000 load csv from 'http://localhost:7000/ipPairsGlobal.csv' as line match(n:ipNode{ipAddress : line[0]}) match(m:ipNode{ipAddress : line[1]}) merge (n)-[:p]->(m)

Degree's centrality

 match (n:ipNode)-[r:p]-(m:ipNode)  
 return n.ipAddress, count(r) as DegreeScore  
 order by DegreeScore desc  
 limit 100;  

Degree in/out>2

MATCH (n)
WHERE size((n)-->()) > 2 AND size((n)<--()) > 2
RETURN count(n)

Betweenness 
 MATCH p=allShortestPaths((source:ipNode)-[:p*]-(target:ipNode))  
 WHERE id(source) < id(target) and length(p) > 1  
 UNWIND nodes(p)[1..-1] as n  
 RETURN n.ipAddress, count(*) as betweenness  
 ORDER BY betweenness DESC  
